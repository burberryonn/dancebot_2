import { Bot, InlineKeyboard, Keyboard } from "grammy";
import "dotenv/config";
import { addUser, createEvent, getAllEvent } from "./services/api.js";
import { updateResults } from "./botActions/getlastupdate.js";
import { generateDateTimeSelector } from "./utils/calendar.js";
import {
  repeatRassilka,
  sendRassilkaMessageWithPhoto,
} from "./utils/rassilka.js";
import { handleEventCreationCallback } from "./botActions/eventHandlersCallback.js";
import mongoose from "mongoose";
import startServer from "./server.js";

import User from "./db/models/user.js";
await startServer();

const bot = new Bot(`${process.env.BOT_API_KEY}`);
const ADMIN_ID = Number(process.env.ADMIN_ID);
// –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞

const eventCreationData = {};
bot.command("start", async (ctx) => {
  const { id: user_id, username: username } = ctx.from;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
  console.log(user_id, ADMIN_ID);
  if (user_id === ADMIN_ID) {
    const keyboard = new Keyboard();
    const adminPanel = keyboard
      .text("–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç")
      .row()
      .text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
      .row()
      .text("–ò–≤–µ–Ω—Ç—ã")
      .resized();
    return ctx.reply("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω", { reply_markup: adminPanel });
  }
  // Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø–∏—Å–∫–∏
  const keyboard = new InlineKeyboard()
    .text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", "subscribe")
    .text("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", "unsubscribe");
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é
  await ctx.reply(`${username} –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ`, {
    reply_markup: keyboard,
  });
});

bot.on("message", async (ctx) => {
  try {
    const username = ctx.from.username || "–≥–æ—Å—Ç—å";
    const telegramId = ctx.from.id;
    console.log(telegramId);
    // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${username}!`);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB
    let user = await User.findOne({ user_id: telegramId });
    if (!user) {
      console.log(telegramId);
      user = new User({
        user_id: telegramId,
        username: username,
      });
      await user.save();
      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${username}`);
    } else {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${username}`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
bot.callbackQuery("subscribe", async (ctx) => {
  const { id: user_id, username } = ctx.from;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
  const existingUser = await User.findOne({ where: { user_id } });
  if (existingUser) {
    await ctx.answerCallbackQuery({
      text: `${username}, –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.`,
    });
  } else {
    await addUser(user_id, username); // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await ctx.answerCallbackQuery({
      text: `${username}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.`,
    });
  }
});
bot.callbackQuery("unsubscribe", async (ctx) => {
  const { id: user_id, username } = ctx.from;
  // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
  const deletedUserCount = await User.destroy({ where: { user_id } });
  if (deletedUserCount > 0) {
    await ctx.answerCallbackQuery({
      text: `${username}, –≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.`,
    });
  } else {
    await ctx.answerCallbackQuery({
      text: `${username}, –≤—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.`,
    });
  }
});
bot.callbackQuery(/^(yes|no)_(\d+)$/, async (ctx) => {
  const response = ctx.match[1] === "yes" ? "–ü–æ–π–¥—É" : "–ù–µ –ø–æ–π–¥—É";
  const eventId = Number(ctx.match[2]);
  const userId = ctx.from.id;
  const username = ctx.from.username.toString();
  try {
    const [eventResponse, created] = await EventResponse.findOrCreate({
      where: { EventId: eventId, UserId: userId, Username: username },
      defaults: { response },
    });
    if (!created) {
      eventResponse.response = response;
      await eventResponse.save();
    }
    await ctx.answerCallbackQuery(`–í–∞—à –æ—Ç–≤–µ—Ç: "${response}" –ø—Ä–∏–Ω—è—Ç.`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:", error);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.");
  }
});
bot.callbackQuery(/^change_event:(\d+)/, async (ctx) => {
  const newIndex = parseInt(ctx.match[1], 10);
  const { allEvents } = await getAllEvent(bot);
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
  if (newIndex < 0 || newIndex >= allEvents.length) {
    return ctx.answerCallbackQuery("–ù–µ—Ç –±–æ–ª—å—à–µ –∏–≤–µ–Ω—Ç–æ–≤.");
  }
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–≤–µ–Ω—Ç–∞
  const event = allEvents[newIndex];
  const keyboard = new InlineKeyboard()
    .text(newIndex > 0 ? "üëà –ü—Ä–µ–¥—ã–¥—É—â–∏–π" : " ", `change_event:${newIndex - 1}`)
    .text("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", `sendrassilka:${event.id}`)
    .text(
      newIndex < allEvents.length - 1 ? "–°–ª–µ–¥—É—é—â–∏–π üëâ" : " ",
      `change_event:${newIndex + 1}`
    );
  try {
    const message = `
        –í—Å–µ–º –¥–æ–±—Ä—ã–π –≤–µ—á–µ—ÄüåÜüôè\n\nüßò‚Äç‚ôÄÔ∏è–ü—Ä–∏–≥–ª–∞—à–∞—é –≤—Å–µ—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞ "<b>${
          event.title
        }</b>"üßò‚Äç‚ôÄÔ∏è\n\n<i>–ö–æ–≥–¥–∞?</i> <b>${new Date(
      event.event_time
    ).toLocaleString("ru-RU", {
      day: "numeric",
      month: "numeric",
      weekday: "long",
      hour: "numeric",
      minute: "numeric",
    })}</b>\n\n<i>–ì–¥–µ?</i> <b>${
      event.address
    }</b>\n\n<i>–ß—Ç–æ –±–µ—Ä–µ–º —Å —Å–æ–±–æ–π?</i> <b>–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —É–¥–æ–±–Ω—É—é –æ–¥–µ–∂–¥—É, –≤–æ–¥–∏—á–∫—É)</b>\n\n<i>–ß—Ç–æ –Ω–∞—Å –∂–¥–µ—Ç?</i><b>${
      event.description || "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è—é—Ç—Å—è."
    }</b>\n\n–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è <b>@vslomalinafik</b> üíå
      `;
    await ctx.editMessageMedia(
      {
        type: "photo",
        media: event.image, // File ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        caption: message,
        parse_mode: "HTML",
      },
      {
        reply_markup: keyboard, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      }
    );
    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error(error);
    await ctx.answerCallbackQuery("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–≤–µ–Ω—Ç.");
  }
});
bot.callbackQuery(/^event_page:(\d+)/, async (ctx) => {
  const page = parseInt(ctx.match[1], 10);
  if (isNaN(page)) return;
  let lastUpdate = null;
  let lastText = "";
  const results = await updateResults(
    ctx.callbackQuery.message?.message_id,
    lastText,
    ctx,
    bot,
    lastUpdate
  );
  const pages = results.responseText.split("\n\n---\n\n");
  const totalPages = pages.length;
  if (page < 0 || page >= totalPages) {
    return ctx.answerCallbackQuery("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.");
  }
  await ctx.api.editMessageText(
    ctx.chat.id,
    ctx.callbackQuery.message?.message_id,
    pages[page],
    {
      parse_mode: "HTML",
      reply_markup: new InlineKeyboard()
        .text(page > 0 ? "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" : "", `event_page:${page - 1}`)
        .text(
          page < totalPages - 1 ? "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è" : "",
          `event_page:${page + 1}`
        ),
    }
  );
  await ctx.answerCallbackQuery();
});
bot.callbackQuery(/^sendrassilka:(\d+)$/, async (ctx) => {
  const eventId = parseInt(ctx.match[1], 10);
  try {
    const event = await Event.findByPk(eventId); // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏–≤–µ–Ω—Ç –∏–∑ –ë–î
    if (!event) {
      return ctx.answerCallbackQuery("–ò–≤–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const message = `${
      event.invitation_message
    }\n\nüßò‚Äç‚ôÄÔ∏è–ü—Ä–∏–≥–ª–∞—à–∞—é –≤—Å–µ—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞ "<b>${
      event.title
    }</b>"üßò‚Äç‚ôÄÔ∏è\n\n<i>–ö–æ–≥–¥–∞?</i> <b>${new Date(event.event_time).toLocaleString(
      "ru-RU",
      {
        day: "numeric",
        month: "numeric",
        weekday: "long",
        hour: "numeric",
        minute: "numeric",
      }
    )}</b>\n\n<i>–ì–¥–µ?</i><b> ${
      event.address
    }</b>\n\n<i>–ß—Ç–æ –±–µ—Ä–µ–º —Å —Å–æ–±–æ–π?</i> <b>–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —É–¥–æ–±–Ω—É—é –æ–¥–µ–∂–¥—É, –≤–æ–¥–∏—á–∫—É)</b>\n\n<i>–ß—Ç–æ –Ω–∞—Å –∂–¥–µ—Ç?</i><b> ${
      event.description || "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è—é—Ç—Å—è."
    }</b>\n\n–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è <b>@vslomalinafik</b> üíå
      `;
    await repeatRassilka(message, event.image, bot, event.id);
    await ctx.answerCallbackQuery(
      "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏."
    );
  } catch (error) {
    console.error(error);
    await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.");
  }
});
bot.callbackQuery("cancel", async (ctx) => {
  await ctx.answerCallbackQuery("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω.");
  await ctx.editMessageText("–í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω—ë–Ω.");
});
bot.hears("–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
  }
  // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–∞
  eventCreationData[ctx.from.id] = {};
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:");
});
bot.hears("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
  }
  let lastUpdate = null;
  let lastText = "";
  const results = await updateResults(
    ctx.message.message_id,
    lastText,
    ctx,
    bot,
    lastUpdate
  );
  const pages = results.responseText.split("\n\n---\n\n"); // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const totalPages = pages.length;
  if (!totalPages) {
    return ctx.reply("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤.");
  }
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  const getKeyboard = (page) => {
    const keyboard = new InlineKeyboard();
    if (page > 0) keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `event_page:${page - 1}`);
    if (page < totalPages - 1)
      keyboard.text("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", `event_page:${page + 1}`);
    return keyboard;
  };
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω
  await ctx.reply(pages[0], {
    parse_mode: "HTML",
    reply_markup: getKeyboard(0),
  });
});
// –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
bot.hears("–ò–≤–µ–Ω—Ç—ã", async (ctx) => {
  const { allEvents } = await getAllEvent(bot);
  if (!allEvents.length) {
    return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤.");
  }
  // –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
  let currentIndex = 0;
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≤–µ–Ω—Ç–∞
  const sendEventMessage = async (index) => {
    const event = allEvents[index];
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const keyboard = new InlineKeyboard()
      .text(index > 0 ? "üëà –ü—Ä–µ–¥—ã–¥—É—â–∏–π" : " ", `change_event:${index - 1}`)
      .text("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", `sendrassilka:${event.id}`)
      .text(
        index < allEvents.length - 1 ? "–°–ª–µ–¥—É—é—â–∏–π üëâ" : " ",
        `change_event:${index + 1}`
      );
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–≤–µ–Ω—Ç–æ–º
    try {
      await ctx.replyWithPhoto(event.image, {
        caption: `<b>–ò–≤–µ–Ω—Ç:${event.title}</b>\n\n–ê–¥—Ä–µ—Å: ${
          event.address
        }\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${event.description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}`,
        reply_markup: keyboard,
        parse_mode: "HTML",
      });
    } catch (error) {
      console.log(error);
    }
  };
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∏–≤–µ–Ω—Ç
  await sendEventMessage(currentIndex);
});
// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–∞
// bot.on("message", async (ctx) => {
//   const currentEvent = eventCreationData[ctx.from.id];
//   if (!currentEvent) return; // –ï—Å–ª–∏ –∏–≤–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
//   // –®–∞–≥–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≤–µ–Ω—Ç–µ
//   if (!currentEvent.title) {
//     currentEvent.title = ctx.message.text;
//     return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞:");
//   }
//   if (!currentEvent.description) {
//     currentEvent.description = ctx.message.text;
//     return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–≤–µ–Ω—Ç–∞:");
//   }
//   if (!currentEvent.address) {
//     currentEvent.address = ctx.message.text;
//     const now = new Date();
//     const calendar = generateDateTimeSelector(
//       now.getFullYear(),
//       now.getMonth(),
//       "date"
//     );
//     await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", { reply_markup: calendar });
//     return;
//   }
//   if (!currentEvent.event_time && currentEvent.waitingForDate) {
//     currentEvent.event_time = new Date(); // ctx.message.text –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º JavaScript
//     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
//     if (isNaN(currentEvent.event_time)) {
//       return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
//     }
//     currentEvent.waitingForDate = false;
//   }
//   // –í–≤–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
//   if (!currentEvent.invitation_message) {
//     currentEvent.invitation_message = ctx.message.text;
//     // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞
//     try {
//       const event = await Event.create(currentEvent as any);
//       delete eventCreationData[ctx.from.id];
//       await ctx.reply(
//         `–ò–≤–µ–Ω—Ç "${event.title}" —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`
//       );
//       // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –≤–∞—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
//       const message = `
//         –í—Å–µ–º –¥–æ–±—Ä—ã–π –≤–µ—á–µ—ÄüåÜüôè
//         üßò‚Äç‚ôÄÔ∏è–ü—Ä–∏–≥–ª–∞—à–∞—é –≤—Å–µ—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞ "<b>${event.title}</b>"üßò‚Äç‚ôÄÔ∏è
//         –ö–æ–≥–¥–∞? <b>${new Date(event.event_time).toLocaleString("ru-RU", {
//           weekday: "long",
//           hour: "numeric",
//           minute: "numeric",
//         })}</b>
//         –ì–¥–µ? <b>${event.address}</b>
//         –ß—Ç–æ –±–µ—Ä–µ–º —Å —Å–æ–±–æ–π? –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —É–¥–æ–±–Ω—É—é –æ–¥–µ–∂–¥—É, –≤–æ–¥–∏—á–∫—É)
//         –ß—Ç–æ –Ω–∞—Å –∂–¥–µ—Ç? <b>${event.description || "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è—é—Ç—Å—è."}</b>
//         –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è <b>@vslomalinafik</b> üíå
//       `;
//       try {
//         await sendRassilkaMessage(message, bot, event.id);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:", error);
//         await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`);
//       }
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞:", error);
//       ctx.reply(
//         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
//       );
//     }
//   }
// });
bot.on("message", async (ctx) => {
  const currentEvent = eventCreationData[ctx.from.id];
  if (!currentEvent) return;
  else {
    if (!currentEvent.invitation_message) {
      currentEvent.invitation_message = ctx.message.text;
      currentEvent.waitingForPhoto = true;
      return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞:");
    }
    if (!currentEvent.title) {
      currentEvent.title = ctx.message.text;
      return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞:");
    }
    if (!currentEvent.description) {
      currentEvent.description = ctx.message.text;
      return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–≤–µ–Ω—Ç–∞:");
    }
    if (!currentEvent.address) {
      currentEvent.address = ctx.message.text;
      const now = new Date();
      const calendar = generateDateTimeSelector(
        now.getFullYear(),
        now.getMonth(),
        "date"
      );
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", { reply_markup: calendar });
      return;
    }
    if (!currentEvent.event_time && currentEvent.waitingForDate) {
      currentEvent.event_time = new Date(); // ctx.message.text –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º JavaScript
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
      if (isNaN(currentEvent.event_time)) {
        return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
      currentEvent.waitingForDate = false;
    }
    // –í–≤–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    // if (!currentEvent.invitation_message) {
    //   currentEvent.invitation_message = ctx.message.text;
    //   currentEvent.waitingForPhoto = true;
    // }
    if (!currentEvent.image && currentEvent.waitingForPhoto) {
      if (ctx.message.photo && ctx.message.photo.length > 0) {
        const photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        currentEvent.image = photo;
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        await ctx.reply("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è...");
        // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        try {
          const event = await createEvent(currentEvent);
          delete eventCreationData[ctx.from.id];
          const message = `${event.invitation_message}\n\n${
            event.title
          }\n\n–ö–æ–≥–¥–∞?${new Date(event.event_time).toLocaleString("ru-RU", {
            day: "numeric",
            month: "numeric",
            weekday: "long",
            hour: "numeric",
            minute: "numeric",
          })}\n\n–ì–¥–µ?${event.address}\n\n${
            event.description || "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è—é—Ç—Å—è."
          }–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @vslomalinafik üíå
            `;
          await sendRassilkaMessageWithPhoto(
            message,
            currentEvent.image,
            bot,
            event.id
          );
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞:", error);
          await ctx.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
          );
        }
      } else {
        // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.");
      }
    } else if (!currentEvent.image) {
      await ctx.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.");
    }
  }
});
bot.on("callback_query", (ctx) =>
  handleEventCreationCallback(ctx, eventCreationData)
);
// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
bot.start();
